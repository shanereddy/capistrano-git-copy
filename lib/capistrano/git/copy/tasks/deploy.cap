namespace :load do
  task :defaults do
    set :git_archive_all_bin, -> {
      bin = `which git-archive-all`
      bin.strip.length > 0 ? bin : File.join(Capistrano::Git::Copy.root_path, 'vendor', 'bin', 'git-archive-all')
    }

    set :git_copy_tmp_path, -> { File.join(Dir.tmpdir, "#{fetch(:application)}_#{fetch(:stage)}") }
  end
end

namespace :git_copy do
  task :wrapper do
    on roles :all do
      fail "git-archive-all binary not found" if fetch(:git_archive_all_bin).strip.length == 0
    end
  end

  task :check do; end
  task :clone do; end

  desc 'Create tar and upload to server'
  task update: :'git_copy:wrapper' do
    tmp_path = fetch(:git_copy_tmp_path)
    local_repo_path = File.join(tmp_path, 'repo')
    local_tar_file = File.join(tmp_path, 'archive.tar.gz')

    local_repo_url = `cd #{local_repo_path} 2>/dev/null && git config --get remote.origin.url 2>/dev/null`.strip

    system("rm -rf #{tmp_path}") unless fetch(:repo_url) == local_repo_url
    system("mkdir -p #{tmp_path}")

    system("if [ -d #{local_repo_path} ]; then cd #{local_repo_path} && git fetch origin; else git clone #{fetch(:repo_url)} #{local_repo_path}; fi")

    system("cd #{local_repo_path} && git reset --hard origin/#{fetch(:branch)} && git submodule init && git submodule update && git-archive-all __tmp.tar")
    system("cd #{local_repo_path} && tar -xf __tmp.tar && cd __tmp && tar -czf #{local_tar_file} .")

    on roles :all do
      upload!(local_tar_file, "#{fetch(:tmp_dir)}/#{fetch(:application)}_#{fetch(:stage)}.tar.gz")
    end

    system("rm -rf #{local_tar_file}")
  end

  desc 'Extract tar to release path'
  task create_release: :'git_copy:update' do
    on roles :all do
      execute(:mkdir, '-p', release_path)
      execute(:tar, '-f', "#{fetch(:tmp_dir)}/#{fetch(:application)}_#{fetch(:stage)}.tar.gz", '-x -C', release_path)
      execute(:rm, '-f', "#{fetch(:tmp_dir)}/#{fetch(:application)}_#{fetch(:stage)}.tar.gz")
    end
  end
end
